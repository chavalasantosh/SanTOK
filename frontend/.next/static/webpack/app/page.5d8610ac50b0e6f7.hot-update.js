"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/api.ts":
/*!********************!*\
  !*** ./lib/api.ts ***!
  \********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyzeText: function() { return /* binding */ analyzeText; },\n/* harmony export */   compressText: function() { return /* binding */ compressText; },\n/* harmony export */   getMockCompressionAnalysis: function() { return /* binding */ getMockCompressionAnalysis; },\n/* harmony export */   getMockTokenizationResult: function() { return /* binding */ getMockTokenizationResult; },\n/* harmony export */   tokenizeText: function() { return /* binding */ tokenizeText; },\n/* harmony export */   validateTokenization: function() { return /* binding */ validateTokenization; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n\nconst API_BASE_URL = \"http://localhost:8000\" || 0;\nconst api = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n    baseURL: API_BASE_URL,\n    timeout: 300000,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    }\n});\n// Request interceptor for logging\napi.interceptors.request.use((config)=>{\n    var _config_method;\n    console.log(\"API Request: \".concat((_config_method = config.method) === null || _config_method === void 0 ? void 0 : _config_method.toUpperCase(), \" \").concat(config.url));\n    return config;\n}, (error)=>{\n    console.error(\"API Request Error:\", error);\n    return Promise.reject(error);\n});\n// Response interceptor for error handling\napi.interceptors.response.use((response)=>{\n    console.log(\"API Response: \".concat(response.status, \" \").concat(response.config.url));\n    return response;\n}, (error)=>{\n    var _error_response, _error_response1, _error_response2, _error_response3;\n    console.error(\"API Response Error:\", error);\n    if (((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status) === 500) {\n        throw new Error(\"Server error. Please try again later.\");\n    } else if (((_error_response1 = error.response) === null || _error_response1 === void 0 ? void 0 : _error_response1.status) === 400) {\n        var _error_response_data;\n        throw new Error(((_error_response_data = error.response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.detail) || \"Invalid request.\");\n    } else if (((_error_response2 = error.response) === null || _error_response2 === void 0 ? void 0 : _error_response2.status) === 404) {\n        throw new Error(\"API endpoint not found. Please check your configuration.\");\n    } else if (((_error_response3 = error.response) === null || _error_response3 === void 0 ? void 0 : _error_response3.status) === 429) {\n        throw new Error(\"Too many requests. Please wait a moment and try again.\");\n    } else if (error.code === \"ECONNABORTED\") {\n        throw new Error(\"Request timeout. Please try again.\");\n    } else if (error.code === \"ECONNREFUSED\") {\n        throw new Error(\"Cannot connect to server. Please check if the backend is running.\");\n    } else {\n        throw new Error(\"Network error. Please check your connection.\");\n    }\n});\nconst tokenizeText = async (text, options)=>{\n    try {\n        console.log(\"Making API request to:\", API_BASE_URL + \"/tokenize\");\n        console.log(\"Request payload:\", {\n            text,\n            tokenizer_type: options.tokenizerType,\n            lower: options.lowercase,\n            drop_specials: options.dropSpecials,\n            collapse_repeats: options.collapseRepeats,\n            embedding: options.enableEmbedding,\n            seed: options.seed,\n            embedding_bit: options.embeddingBit\n        });\n        const response = await api.post(\"/tokenize\", {\n            text,\n            tokenizer_type: options.tokenizerType,\n            lower: options.lowercase,\n            drop_specials: options.dropSpecials,\n            collapse_repeats: options.collapseRepeats,\n            embedding: options.enableEmbedding,\n            seed: options.seed,\n            embedding_bit: options.embeddingBit\n        });\n        console.log(\"API response received:\", response.data);\n        return response.data;\n    } catch (error) {\n        var _error_response, _error_response1, _error_response2, _error_config, _error_config1;\n        console.error(\"Tokenization error details:\", {\n            message: error.message,\n            code: error.code,\n            status: (_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status,\n            statusText: (_error_response1 = error.response) === null || _error_response1 === void 0 ? void 0 : _error_response1.statusText,\n            data: (_error_response2 = error.response) === null || _error_response2 === void 0 ? void 0 : _error_response2.data,\n            url: (_error_config = error.config) === null || _error_config === void 0 ? void 0 : _error_config.url,\n            baseURL: (_error_config1 = error.config) === null || _error_config1 === void 0 ? void 0 : _error_config1.baseURL\n        });\n        if (error.code === \"ECONNABORTED\") {\n            throw new Error(\"Request timeout. Please try with shorter text.\");\n        }\n        throw error;\n    }\n};\nconst analyzeText = async (text, options)=>{\n    try {\n        const response = await api.post(\"/analyze\", {\n            text,\n            tokenizer_type: options.tokenizerType,\n            lower: options.lowercase,\n            drop_specials: options.dropSpecials,\n            collapse_repeats: options.collapseRepeats,\n            embedding: options.enableEmbedding,\n            seed: options.seed,\n            embedding_bit: options.embeddingBit\n        });\n        return response.data;\n    } catch (error) {\n        console.error(\"Analysis error:\", error);\n        throw error;\n    }\n};\nconst compressText = async (text, options)=>{\n    try {\n        const response = await api.post(\"/compress\", {\n            text,\n            tokenizer_type: options.tokenizerType,\n            lower: options.lowercase,\n            drop_specials: options.dropSpecials,\n            collapse_repeats: options.collapseRepeats,\n            embedding: options.enableEmbedding,\n            seed: options.seed,\n            embedding_bit: options.embeddingBit\n        });\n        return response.data;\n    } catch (error) {\n        console.error(\"Compression error:\", error);\n        throw error;\n    }\n};\nconst validateTokenization = async (originalText, tokens, options)=>{\n    try {\n        const response = await api.post(\"/validate\", {\n            original_text: originalText,\n            tokens,\n            tokenizer_type: options.tokenizerType,\n            lower: options.lowercase,\n            drop_specials: options.dropSpecials,\n            collapse_repeats: options.collapseRepeats,\n            embedding: options.enableEmbedding,\n            seed: options.seed,\n            embedding_bit: options.embeddingBit\n        });\n        return response.data;\n    } catch (error) {\n        console.error(\"Validation error:\", error);\n        throw error;\n    }\n};\n// Mock data for development when API is not available\nconst getMockTokenizationResult = (text, options)=>{\n    let tokens = [];\n    switch(options.tokenizerType){\n        case \"space\":\n            tokens = text.split(/\\s+/).filter((token)=>token.length > 0);\n            break;\n        case \"word\":\n            // Split on word boundaries, keeping punctuation\n            tokens = text.split(/(\\W+)/).filter((token)=>token.length > 0);\n            break;\n        case \"char\":\n            tokens = text.split(\"\");\n            break;\n        case \"grammar\":\n            // Grammar-aware tokenization - split on sentence boundaries\n            tokens = text.split(/([.!?]+)/).filter((token)=>token.length > 0);\n            break;\n        case \"subword\":\n            // Simple subword tokenization - split on common separators\n            tokens = text.split(/([\\/_\\-\\.])/).filter((token)=>token.length > 0);\n            break;\n        case \"bpe\":\n            // Byte Pair Encoding simulation\n            tokens = text.match(/.{1,3}/g) || [];\n            break;\n        case \"syllable\":\n            // Syllable-based tokenization simulation\n            tokens = text.split(/([aeiouAEIOU]+)/).filter((token)=>token.length > 0);\n            break;\n        case \"frequency\":\n            // Frequency-based tokenization simulation\n            tokens = text.split(/([a-zA-Z]+)/).filter((token)=>token.length > 0);\n            break;\n        case \"byte\":\n            // Byte-level tokenization\n            tokens = Array.from(text).map((char)=>char.charCodeAt(0).toString());\n            break;\n        default:\n            tokens = text.split(/\\s+/).filter((token)=>token.length > 0);\n    }\n    const tokenObjects = tokens.map((token, index)=>({\n            text: token,\n            id: index,\n            position: text.indexOf(token),\n            length: token.length,\n            type: options.tokenizerType,\n            color: \"hsl(\".concat(index * 137.5 % 360, \", 70%, 50%)\")\n        }));\n    return {\n        tokens: tokenObjects,\n        tokenCount: tokenObjects.length,\n        characterCount: text.length,\n        tokenizerType: options.tokenizerType,\n        processingTime: Math.random() * 100 + 50,\n        memoryUsage: Math.random() * 1024 + 512,\n        compressionRatio: Math.random() * 0.5 + 0.3,\n        reversibility: true,\n        fingerprint: {\n            signatureDigit: Math.floor(Math.random() * 10),\n            compatDigit: Math.floor(Math.random() * 10),\n            textValue: Math.floor(Math.random() * 10000),\n            textValueWithEmbedding: Math.floor(Math.random() * 10000)\n        }\n    };\n};\nconst getMockCompressionAnalysis = ()=>[\n        {\n            algorithm: \"RLE\",\n            compressionRatio: 0.45,\n            tokensSaved: 120,\n            percentageSaved: 35.2,\n            reversibility: true\n        },\n        {\n            algorithm: \"Pattern\",\n            compressionRatio: 0.38,\n            tokensSaved: 145,\n            percentageSaved: 42.1,\n            reversibility: true\n        },\n        {\n            algorithm: \"Frequency\",\n            compressionRatio: 0.52,\n            tokensSaved: 98,\n            percentageSaved: 28.7,\n            reversibility: true\n        },\n        {\n            algorithm: \"Adaptive\",\n            compressionRatio: 0.31,\n            tokensSaved: 178,\n            percentageSaved: 51.8,\n            reversibility: true\n        }\n    ];\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api.ts\n"));

/***/ })

});